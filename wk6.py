# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k5ouafdGjc9g-VMlAQd6H9lliBvA_dEa
"""

import tensorflow as tf
from tensorflow.keras import layers, models

model = models.Sequential([
    layers.Conv2D(16, (3,3), activation='relu', input_shape=(128, 128, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(32, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(2, activation='softmax')  # 2 classes
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save it
with open('model.tflite', 'wb') as f:
    f.write(tflite_model)

import tensorflow as tf
import numpy as np
import os
from PIL import Image

interpreter = tf.lite.Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Define the path to an example image
# Replace 'non_recyclable' and 'example_image.jpg' with the actual path to one of your images
image_path = os.path.join('non_recyclable', 'example_image.jpg')

# Check if the example image file exists
if not os.path.exists(image_path):
    print(f"Error: Example image not found at {image_path}")
else:
    # Load and preprocess image
    img = Image.open(image_path).convert('RGB') # Ensure image is in RGB format
    img = img.resize((128, 128)) # Resize to model input size
    preprocessed_image = np.array(img, dtype=np.float32) # Convert to numpy array with float32 dtype
    preprocessed_image = np.expand_dims(preprocessed_image, axis=0) # Add batch dimension

    interpreter.set_tensor(input_details[0]['index'], preprocessed_image)
    interpreter.invoke()

    output_data = interpreter.get_tensor(output_details[0]['index'])
    print("Prediction:", output_data)